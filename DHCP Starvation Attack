Project Overview
This project demonstrates a red team attack simulation in a controlled lab environment targeting the Dynamic Host Configuration Protocol (DHCP). The attack used a DHCP starvation technique to consume all available IP addresses in a Windows Server 2019 DHCP scope, preventing legitimate clients from obtaining network access. The engagement included live traffic capture, server-side lease monitoring, and impact validation on a Windows 10 client.

Engagement Scope & Objectives
The objectives of this simulation were:
* Configure a DHCP scope and verify its operational status.
* Launch a DHCP starvation attack using spoofed MAC addresses.
* Capture DHCP traffic for analysis.
* Observe DHCP server lease table flooding during the attack.
* Assess the resulting client-side connectivity failure.
* Identify mitigations to prevent similar attacks in production environments.

Lab Environment Setup
* Kali Linux (Attacker) – 172.16.10.50 – Used for launching the DHCP starvation attack and packet capture.
* Windows Server 2019 (DHCP Server) – 172.16.10.10 – Hosted the DHCP service and managed leases.
* Windows 10 Client (Victim) – 172.16.10.20 – Depended on the DHCP server for IP assignment.

Phase 1 – DHCP Scope Setup (Server-Side Preparation)
On Windows Server 2019, the DHCP role was installed and configured as follows:
1. Opened Server Manager, selected Add Roles and Features, and installed the DHCP Server role.
2. Launched the DHCP Management Console.
3. Navigated to IPv4 → New Scope.
4. Named the scope LabScope.
5. Defined the IP range: Start 172.16.10.100, End 172.16.10.199.
6. Set the subnet mask to 255.255.255.0.
7. Left exclusions empty (all addresses in the range available).
8. Lease duration set to 8 days.
9. Configured router option as 172.16.10.1.
10. Activated the scope.
Initial server verification showed: Address Pool: 172.16.10.100 – 172.16.10.199 Leases in Use: 0 Available: 100

Phase 2 – Reconnaissance
From the attacker’s Kali machine:
Command: ping 172.16.10.10 Output confirmed server was reachable with sub-millisecond latency.
From the Windows 10 client before the attack: ipconfig output showed a valid DHCP-issued address: 172.16.10.132 with gateway 172.16.10.1, confirming normal operation.

Phase 3 – Scanning & Enumeration
On Kali: Command: nmap -sU -p 67 172.16.10.10 Result: UDP port 67 (DHCP Server) open, confirming the service was active and listening for requests.

Phase 4 – Exploitation (DHCP Starvation Attack)
If Yersinia is not installed, it can be added via: sudo apt install yersinia
To launch the attack:
1. Run: sudo yersinia -G
2. Select DHCP from the protocol list.
3. Ensure the active interface (eth0) is selected.
4. Click Launch Attack.
5. Choose DHCP sending DISCOVER packet.
This caused Yersinia to send thousands of DHCPDISCOVER messages with spoofed MAC addresses, forcing the server to reserve an IP for each fake request until depletion.
Yersinia counters during the attack showed: Sent DHCPDISCOVER packets: Over 1000 Received DHCPOFFER packets: 100

Phase 5 – Live Packet Capture (Wireshark)
Wireshark was run on Kali to capture and analyze the attack. Filter used: udp port 67 or udp port 68
This filter isolates DHCP traffic, making it easy to observe the attack sequence. Captured packets included: DHCP Discover from spoofed MAC addresses. DHCP Offer from server, sequentially assigning addresses from 172.16.10.100 upward.
This confirmed that each spoofed request triggered a legitimate offer from the server.

Phase 6 – Server-Side MAC Flood Observation
The Windows Server 2019 DHCP Management Console under IPv4 → Scope → Address Leases displayed: Leases in Use: 100 Available: 0
Example entries: 172.16.10.100 → 02:1a:7e:4b:12:34 172.16.10.101 → 02:7f:99:aa:bb:cc 172.16.10.199 → 02:fa:cd:33:44:55
All addresses were bound to unique, spoofed MACs generated by Yersinia.

Phase 7 – Post-Exploitation Verification
On the Windows 10 client: ipconfig /release followed by ipconfig /renew
Result: Unable to contact DHCP server. Request timed out. Client received an APIPA address (169.254.x.x), confirming inability to reach the network.

Final Outcome
The attack successfully depleted the DHCP scope, blocking legitimate network access for clients. This was verified by both packet capture and server-side lease monitoring.

Countermeasures (Brief Summary)
* Enable DHCP Snooping on network switches to block untrusted DHCP traffic.
* Apply rate limiting for DHCP requests per interface.
* Configure port security to limit the number of allowed MAC addresses.
* Segment DHCP servers into dedicated VLANs.
* Monitor for excessive DHCPDISCOVER traffic as an early warning.

Key Takeaways for a Red Teamer
This simulation highlighted how quickly a DHCP starvation attack can disable an unprotected network. Yersinia’s MAC spoofing combined with packet capture analysis provided a clear attack path from discovery to disruption. In real-world engagements, this could be combined with rogue DHCP tactics to redirect or intercept traffic for further exploitation.


